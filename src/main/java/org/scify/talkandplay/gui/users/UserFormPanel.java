/**
* Copyright 2016 SciFY
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package org.scify.talkandplay.gui.users;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.lang3.StringUtils;
import org.scify.talkandplay.gui.MainFrame;
import org.scify.talkandplay.gui.MainPanel;
import org.scify.talkandplay.gui.configuration.ConfigurationPanel;
import org.scify.talkandplay.gui.helpers.GuiHelper;
import org.scify.talkandplay.gui.helpers.UIConstants;
import org.scify.talkandplay.models.User;
import org.scify.talkandplay.models.sensors.KeyboardSensor;
import org.scify.talkandplay.models.sensors.MouseSensor;
import org.scify.talkandplay.models.sensors.Sensor;
import org.scify.talkandplay.services.UserService;

public class UserFormPanel extends javax.swing.JPanel {

    private String userImage;
    private MainFrame parent;
    private UserService userService;
    private GuiHelper guiHelper;
    private User user;
    private Sensor selectionSensor;
    private Sensor navigationSensor;

    public UserFormPanel(MainFrame parent) {
        this.guiHelper = new GuiHelper();
        this.parent = parent;
        this.userService = new UserService();
        this.user = null;
        this.selectionSensor = null;
        this.navigationSensor = null;
        initComponents();
        initCustomComponents();
    }

    public UserFormPanel(MainFrame parent, User user) {
        this.guiHelper = new GuiHelper();
        this.parent = parent;
        this.user = user;
        this.userService = new UserService();
        initComponents();
        initCustomComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    // Generated using JFormDesigner Evaluation license - unknown
    private void initComponents() {
        userPanel = new JPanel();
        nameTextField = new JTextField();
        uploadImageLabel = new JLabel();
        rotationSpeedSlider = new JSlider();
        rotationSpeedLabel = new JLabel();
        saveAndNextButton = new JButton();
        errorLabel = new JLabel();
        saveAndBackButton = new JButton();
        backButton = new JButton();
        nameLabel = new JLabel();
        imageLabel = new JLabel();
        sensorLabel = new JLabel();
        defaultGridSizeLabel = new JLabel();
        columnsTextField = new JTextField();
        xLabel = new JLabel();
        rowsTextField = new JTextField();
        tilesLabel = new JLabel();
        soundCheckBox = new JCheckBox();
        textCheckBox = new JCheckBox();
        imageCheckBox = new JCheckBox();
        selectionSensorTextField1 = new JTextField();
        navigationSensorTextField = new JTextField();
        selectionSensorTextField2 = new JTextField();
        autoScanRadioButton = new JRadioButton();
        manualScanRadioButton = new JRadioButton();
        jScrollPane1 = new JScrollPane();
        step6ExplTextArea = new JTextArea();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jLabel3 = new JLabel();
        saveToFileButton = new JButton();
        successLabel = new JLabel();
        jToolBar1 = new JToolBar();
        jButton1 = new JButton();

        //======== this ========
        setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder(new javax
        .swing.border.EmptyBorder(0,0,0,0), "JF\u006frm\u0044es\u0069gn\u0065r \u0045va\u006cua\u0074io\u006e",javax.swing
        .border.TitledBorder.CENTER,javax.swing.border.TitledBorder.BOTTOM,new java.awt.
        Font("D\u0069al\u006fg",java.awt.Font.BOLD,12),java.awt.Color.red
        ), getBorder())); addPropertyChangeListener(new java.beans.PropertyChangeListener(){@Override
        public void propertyChange(java.beans.PropertyChangeEvent e){if("\u0062or\u0064er".equals(e.getPropertyName(
        )))throw new RuntimeException();}});

        //======== userPanel ========
        {

            //---- nameTextField ----
            nameTextField.setText("\u038c\u03bd\u03bf\u03bc\u03b1 \u03c7\u03c1\u03ae\u03c3\u03c4\u03b7");

            //---- uploadImageLabel ----
            uploadImageLabel.setHorizontalAlignment(SwingConstants.CENTER);
            uploadImageLabel.setIcon(new ImageIcon(getClass().getResource("/org/scify/talkandplay/resources/no-photo.png")));
            uploadImageLabel.setToolTipText("");
            uploadImageLabel.setHorizontalTextPosition(SwingConstants.CENTER);
            uploadImageLabel.setVerticalTextPosition(SwingConstants.BOTTOM);
            uploadImageLabel.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    uploadImageLabelMouseClicked(e);
                }
            });

            //---- rotationSpeedSlider ----
            rotationSpeedSlider.setMajorTickSpacing(1);
            rotationSpeedSlider.setMaximum(10);
            rotationSpeedSlider.setMinimum(1);
            rotationSpeedSlider.setMinorTickSpacing(1);
            rotationSpeedSlider.setPaintLabels(true);
            rotationSpeedSlider.setSnapToTicks(true);
            rotationSpeedSlider.setValue(1);

            //---- rotationSpeedLabel ----
            rotationSpeedLabel.setText("4. \u0395\u03c0\u03af\u03bb\u03b5\u03be\u03b5 \u03c4\u03b1\u03c7\u03cd\u03c4\u03b7\u03c4\u03b1 \u03b5\u03bd\u03b1\u03bb\u03bb\u03b1\u03b3\u03ae\u03c2");

            //---- saveAndNextButton ----
            saveAndNextButton.setText("\u0391\u03c0\u03bf\u03b8\u03ae\u03ba\u03b5\u03c5\u03c3\u03b7 \u03ba\u03b1\u03b9 \u03c3\u03c5\u03bd\u03ad\u03c7\u03b5\u03b9\u03b1");
            saveAndNextButton.setBorder(null);
            saveAndNextButton.addActionListener(e -> saveAndNextButtonActionPerformed(e));

            //---- errorLabel ----
            errorLabel.setText("error");

            //---- saveAndBackButton ----
            saveAndBackButton.setText("\u0391\u03c0\u03bf\u03b8\u03ae\u03ba\u03b5\u03c5\u03c3\u03b7 \u03ba\u03b1\u03b9 \u03ad\u03be\u03bf\u03b4\u03bf\u03c2");
            saveAndBackButton.setBorder(null);
            saveAndBackButton.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    saveAndBackButtonMouseClicked(e);
                }
            });

            //---- backButton ----
            backButton.setText("\u03a0\u03af\u03c3\u03c9");
            backButton.setBorder(null);

            //---- nameLabel ----
            nameLabel.setText("1. \u0393\u03c1\u03ac\u03c8\u03b5 \u03cc\u03bd\u03bf\u03bc\u03b1 \u03c7\u03c1\u03ae\u03c3\u03c4\u03b7");

            //---- imageLabel ----
            imageLabel.setText("2. \u0391\u03bd\u03ad\u03b2\u03b1\u03c3\u03b5 \u03c6\u03c9\u03c4\u03bf\u03b3\u03c1\u03b1\u03c6\u03af\u03b1 \u03c7\u03c1\u03ae\u03c3\u03c4\u03b7");

            //---- sensorLabel ----
            sensorLabel.setText("3. \u03a4\u03c1\u03cc\u03c0\u03bf\u03b9 \u03c0\u03bb\u03bf\u03ae\u03b3\u03b7\u03c3\u03b7\u03c2 \u03ba\u03b1\u03b9 \u03b5\u03c0\u03b9\u03bb\u03bf\u03b3\u03ae\u03c2");

            //---- defaultGridSizeLabel ----
            defaultGridSizeLabel.setText("5. \u039a\u03b1\u03b8\u03cc\u03c1\u03b9\u03c3\u03b5 \u03bc\u03ad\u03b3\u03b5\u03b8\u03bf\u03c2 \u03c0\u03af\u03bd\u03b1\u03ba\u03b1");

            //---- columnsTextField ----
            columnsTextField.setText("3");

            //---- xLabel ----
            xLabel.setText("x");

            //---- rowsTextField ----
            rowsTextField.setText("3");

            //---- tilesLabel ----
            tilesLabel.setText("6. \u0395\u03bc\u03c6\u03ac\u03bd\u03b9\u03c3\u03b7 \u03bb\u03ad\u03be\u03b5\u03c9\u03bd");

            //---- soundCheckBox ----
            soundCheckBox.setText("\u0389\u03c7\u03bf\u03c2");

            //---- textCheckBox ----
            textCheckBox.setText("\u039b\u03b5\u03ba\u03c4\u03b9\u03ba\u03cc");

            //---- imageCheckBox ----
            imageCheckBox.setText("\u0395\u03b9\u03ba\u03cc\u03bd\u03b1");

            //---- selectionSensorTextField1 ----
            selectionSensorTextField1.setText("\u038c\u03c1\u03b9\u03c3\u03b5 \u03ba\u03bf\u03c5\u03bc\u03c0\u03af \u03b5\u03c0\u03b9\u03bb\u03bf\u03b3\u03ae\u03c2");

            //---- navigationSensorTextField ----
            navigationSensorTextField.setText("\u038c\u03c1\u03b9\u03c3\u03b5 \u03ba\u03bf\u03c5\u03bc\u03c0\u03af \u03c0\u03bb\u03bf\u03ae\u03b3\u03b7\u03c3\u03b7\u03c2");

            //---- selectionSensorTextField2 ----
            selectionSensorTextField2.setText("\u038c\u03c1\u03b9\u03c3\u03b5 \u03ba\u03bf\u03c5\u03bc\u03c0\u03af \u03b5\u03c0\u03b9\u03bb\u03bf\u03b3\u03ae\u03c2");

            //---- autoScanRadioButton ----
            autoScanRadioButton.setText("\u0391\u03c5\u03c4\u03cc\u03bc\u03b1\u03c4\u03b1");

            //---- manualScanRadioButton ----
            manualScanRadioButton.setText("\u03a7\u03b5\u03b9\u03c1\u03bf\u03ba\u03af\u03bd\u03b7\u03c4\u03b1");

            //======== jScrollPane1 ========
            {

                //---- step6ExplTextArea ----
                step6ExplTextArea.setColumns(20);
                step6ExplTextArea.setRows(5);
                step6ExplTextArea.setText("\u03a4\u03bf \u03c0\u03b5\u03b4\u03af\u03bf 5 \u03bc\u03c0\u03bf\u03c1\u03b5\u03af \u03bd\u03b1 \u03c1\u03c5\u03b8\u03bc\u03b9\u03c3\u03c4\u03b5\u03af \u03ba\u03b1\u03b9 \u03b1\u03bd\u03b5\u03be\u03ac\u03c1\u03c4\u03b7\u03c4\u03b1 \u03b3\u03b9\u03b1 \u03ba\u03ac\u03b8\u03b5 \u03c3\u03cd\u03bd\u03bf\u03bb\u03bf \u03bb\u03ad\u03be\u03b5\u03c9\u03bd \u03c3\u03b5 \u03b5\u03c0\u03cc\u03bc\u03b5\u03bd\u03bf \u03c3\u03c4\u03ac\u03b4\u03b9\u03bf.");
                jScrollPane1.setViewportView(step6ExplTextArea);
            }

            //---- jLabel1 ----
            jLabel1.setText("\u03b5\u03c0\u03b9\u03bb\u03bf\u03b3\u03ae:");

            //---- jLabel2 ----
            jLabel2.setText("\u03b5\u03c0\u03b9\u03bb\u03bf\u03b3\u03ae:");

            //---- jLabel3 ----
            jLabel3.setText("\u03c0\u03bb\u03bf\u03ae\u03b3\u03b7\u03c3\u03b7:");

            //---- saveToFileButton ----
            saveToFileButton.setText("\u0391\u03c0\u03bf\u03b8\u03ae\u03ba\u03b5\u03c5\u03c3\u03b7 \u03c3\u03b5 \u03b1\u03c1\u03c7\u03b5\u03af\u03bf");
            saveToFileButton.setBorder(null);
            saveToFileButton.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    saveToFileButtonMouseClicked(e);
                }
            });

            //---- successLabel ----
            successLabel.setText("success");
            successLabel.setToolTipText("");

            GroupLayout userPanelLayout = new GroupLayout(userPanel);
            userPanel.setLayout(userPanelLayout);
            userPanelLayout.setHorizontalGroup(
                userPanelLayout.createParallelGroup()
                    .addGroup(userPanelLayout.createSequentialGroup()
                        .addGroup(userPanelLayout.createParallelGroup()
                            .addGroup(userPanelLayout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(userPanelLayout.createParallelGroup()
                                    .addGroup(userPanelLayout.createSequentialGroup()
                                        .addComponent(nameLabel)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(GroupLayout.Alignment.TRAILING, userPanelLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(saveToFileButton, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(saveAndBackButton)
                                        .addGap(6, 6, 6)))
                                .addComponent(saveAndNextButton))
                            .addGroup(userPanelLayout.createSequentialGroup()
                                .addGroup(userPanelLayout.createParallelGroup()
                                    .addGroup(userPanelLayout.createSequentialGroup()
                                        .addGap(19, 19, 19)
                                        .addGroup(userPanelLayout.createParallelGroup()
                                            .addGroup(userPanelLayout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(nameTextField, GroupLayout.PREFERRED_SIZE, 223, GroupLayout.PREFERRED_SIZE))
                                            .addComponent(imageLabel)
                                            .addGroup(userPanelLayout.createSequentialGroup()
                                                .addGap(49, 49, 49)
                                                .addComponent(uploadImageLabel)))
                                        .addGap(89, 89, 89)
                                        .addGroup(userPanelLayout.createParallelGroup()
                                            .addComponent(sensorLabel)
                                            .addGroup(userPanelLayout.createSequentialGroup()
                                                .addGap(6, 6, 6)
                                                .addGroup(userPanelLayout.createParallelGroup()
                                                    .addComponent(manualScanRadioButton)
                                                    .addComponent(autoScanRadioButton)
                                                    .addGroup(userPanelLayout.createSequentialGroup()
                                                        .addGap(21, 21, 21)
                                                        .addGroup(userPanelLayout.createParallelGroup()
                                                            .addGroup(GroupLayout.Alignment.TRAILING, userPanelLayout.createSequentialGroup()
                                                                .addComponent(jLabel1)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(selectionSensorTextField1, GroupLayout.PREFERRED_SIZE, 178, GroupLayout.PREFERRED_SIZE))
                                                            .addGroup(userPanelLayout.createSequentialGroup()
                                                                .addGroup(userPanelLayout.createParallelGroup()
                                                                    .addComponent(jLabel3)
                                                                    .addComponent(jLabel2, GroupLayout.Alignment.TRAILING))
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addGroup(userPanelLayout.createParallelGroup()
                                                                    .addComponent(selectionSensorTextField2, GroupLayout.PREFERRED_SIZE, 178, GroupLayout.PREFERRED_SIZE)
                                                                    .addComponent(navigationSensorTextField, GroupLayout.PREFERRED_SIZE, 178, GroupLayout.PREFERRED_SIZE)))))))))
                                    .addGroup(userPanelLayout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(successLabel, GroupLayout.PREFERRED_SIZE, 402, GroupLayout.PREFERRED_SIZE)))
                                .addGap(160, 160, 160)
                                .addGroup(userPanelLayout.createParallelGroup()
                                    .addGroup(userPanelLayout.createSequentialGroup()
                                        .addGroup(userPanelLayout.createParallelGroup()
                                            .addGroup(GroupLayout.Alignment.TRAILING, userPanelLayout.createSequentialGroup()
                                                .addComponent(rotationSpeedSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addGap(26, 26, 26))
                                            .addGroup(GroupLayout.Alignment.TRAILING, userPanelLayout.createParallelGroup()
                                                .addComponent(defaultGridSizeLabel)
                                                .addComponent(rotationSpeedLabel)
                                                .addGroup(userPanelLayout.createSequentialGroup()
                                                    .addGap(6, 6, 6)
                                                    .addComponent(soundCheckBox)
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(textCheckBox)
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(imageCheckBox))
                                                .addComponent(tilesLabel))
                                            .addGroup(GroupLayout.Alignment.TRAILING, userPanelLayout.createSequentialGroup()
                                                .addComponent(rowsTextField, GroupLayout.PREFERRED_SIZE, 41, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(xLabel)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(columnsTextField, GroupLayout.PREFERRED_SIZE, 41, GroupLayout.PREFERRED_SIZE)
                                                .addGap(94, 94, 94)))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(userPanelLayout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jScrollPane1)))))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(backButton)
                        .addGap(56, 56, 56))
                    .addGroup(GroupLayout.Alignment.TRAILING, userPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(errorLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
            );
            userPanelLayout.setVerticalGroup(
                userPanelLayout.createParallelGroup()
                    .addGroup(userPanelLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(userPanelLayout.createParallelGroup()
                            .addGroup(userPanelLayout.createSequentialGroup()
                                .addGroup(userPanelLayout.createParallelGroup()
                                    .addGroup(userPanelLayout.createSequentialGroup()
                                        .addComponent(nameLabel)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(nameTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                    .addGroup(userPanelLayout.createSequentialGroup()
                                        .addComponent(rotationSpeedLabel)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(rotationSpeedSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                                .addGroup(userPanelLayout.createParallelGroup()
                                    .addGroup(userPanelLayout.createSequentialGroup()
                                        .addGap(40, 40, 40)
                                        .addComponent(imageLabel))
                                    .addGroup(GroupLayout.Alignment.TRAILING, userPanelLayout.createSequentialGroup()
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(defaultGridSizeLabel)))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(userPanelLayout.createParallelGroup()
                                    .addComponent(uploadImageLabel)
                                    .addGroup(userPanelLayout.createSequentialGroup()
                                        .addGroup(userPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                            .addComponent(xLabel)
                                            .addComponent(columnsTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                            .addComponent(rowsTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                        .addGap(30, 30, 30)
                                        .addComponent(tilesLabel)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(userPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                            .addComponent(soundCheckBox)
                                            .addComponent(textCheckBox)
                                            .addComponent(imageCheckBox))
                                        .addGap(31, 31, 31)
                                        .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 91, GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 60, Short.MAX_VALUE)
                                .addGroup(userPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(saveAndNextButton)
                                    .addComponent(backButton)
                                    .addComponent(saveAndBackButton)
                                    .addComponent(saveToFileButton, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                            .addGroup(userPanelLayout.createSequentialGroup()
                                .addComponent(sensorLabel)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(autoScanRadioButton)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(userPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                    .addGroup(userPanelLayout.createSequentialGroup()
                                        .addGroup(userPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                            .addComponent(selectionSensorTextField1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel1))
                                        .addGap(8, 8, 8)
                                        .addComponent(manualScanRadioButton)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(userPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel2)
                                            .addComponent(selectionSensorTextField2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                        .addGap(37, 37, 37))
                                    .addGroup(userPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(navigationSensorTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3, GroupLayout.PREFERRED_SIZE, 15, GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(errorLabel)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(successLabel)
                                .addGap(111, 111, 111))))
            );
        }

        GroupLayout layout = new GroupLayout(this);
        setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup()
                .addComponent(userPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup()
                .addComponent(userPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        //======== jToolBar1 ========
        {
            jToolBar1.setRollover(true);
        }

        //---- jButton1 ----
        jButton1.setText("jButton1");
    }// </editor-fold>//GEN-END:initComponents

    private void initCustomComponents() {
        errorLabel.setVisible(false);
        successLabel.setVisible(false);

        setUI();
        setFocusListeners();
        setActionListeners();

        if (user != null) {
            parent.setPanelTitle("Επεξεργασία χρήστη");

            guiHelper.drawButton(saveAndNextButton);
            guiHelper.drawButton(saveAndBackButton);

            nameTextField.setText(user.getName());
            uploadImageLabel.setIcon(guiHelper.getIcon(user.getImage()));
            rotationSpeedSlider.setValue(user.getConfiguration().getRotationSpeed());
            rowsTextField.setText(String.valueOf(user.getConfiguration().getDefaultGridRow()));
            columnsTextField.setText(String.valueOf(user.getConfiguration().getDefaultGridColumn()));
            soundCheckBox.setSelected(user.getConfiguration().hasSound());
            imageCheckBox.setSelected(user.getConfiguration().hasImage());
            textCheckBox.setSelected(user.getConfiguration().hasText());

            selectionSensor = user.getConfiguration().getSelectionSensor();
            navigationSensor = user.getConfiguration().getNavigationSensor();

            //check if auto or manual scanning is set
            if (user.getConfiguration().getNavigationSensor() == null) {
                autoScanRadioButton.setSelected(true);

                enableTextField(selectionSensorTextField1);
                disableTextField(selectionSensorTextField2);
                disableTextField(navigationSensorTextField);

                selectionSensorTextField1.setText(setSensorText(user.getConfiguration().getSelectionSensor()));
            } else {
                manualScanRadioButton.setSelected(true);

                enableTextField(selectionSensorTextField2);
                enableTextField(navigationSensorTextField);
                disableTextField(selectionSensorTextField1);

                selectionSensorTextField2.setText(setSensorText(user.getConfiguration().getSelectionSensor()));
                navigationSensorTextField.setText(setSensorText(user.getConfiguration().getNavigationSensor()));
            }
        } else {
            parent.setPanelTitle("Προσθήκη χρήστη");

            saveAndBackButton.setVisible(false);
            guiHelper.drawButton(saveAndNextButton);

            autoScanRadioButton.setSelected(true);
            enableTextField(selectionSensorTextField1);
            disableTextField(selectionSensorTextField2);
            disableTextField(navigationSensorTextField);
        }

        guiHelper.drawButton(backButton);
    }

    private boolean validateUser() {

        String name = nameTextField.getText();

        //name should not be empty
        if (name.isEmpty() || "Όνομα χρήστη".equals(name)) {
            errorLabel.setText("Το όνομα χρήστη δεν πρέπει να είναι κενό");
            errorLabel.setVisible(true);
            return false;
        }

        //name should be unique
        if (user == null || !name.equals(user.getName())) {
            List<User> users = userService.getUsers();
            for (User user : users) {
                if (user.getName().equals(name)) {
                    errorLabel.setText("Το όνομα χρήστη υπάρχει ήδη");
                    errorLabel.setVisible(true);
                    return false;
                }
            }
        }

        //rows, columns should not be empty, should be integers
        if (rowsTextField.getText().isEmpty() || !StringUtils.isNumeric(rowsTextField.getText())
                || (StringUtils.isNumeric(rowsTextField.getText()) && (Integer.parseInt(rowsTextField.getText()) < 2 || Integer.parseInt(rowsTextField.getText()) > 6))
                || columnsTextField.getText().isEmpty() || !StringUtils.isNumeric(columnsTextField.getText())
                || (StringUtils.isNumeric(columnsTextField.getText()) && (Integer.parseInt(columnsTextField.getText()) < 2 || Integer.parseInt(columnsTextField.getText()) > 6))) {
            errorLabel.setText("Οι κολώνες και οι στήλες του πίνακα πρέπει να είναι ακέραιοι, μεταξύ των ψηφίων 2 και 6.");
            errorLabel.setVisible(true);
            return false;
        }

        //sensors should not be null
        if (autoScanRadioButton.isSelected() && selectionSensor == null) {
            errorLabel.setText("Το κουμπί επιλογής δεν πρέπει να είναι κενό");
            errorLabel.setVisible(true);
            return false;
        } else if (manualScanRadioButton.isSelected() && (selectionSensor == null || navigationSensor == null)) {
            errorLabel.setText("Τα κουμπιά επιλογής και πλοήγησης δεν πρέπει να είναι κενά");
            errorLabel.setVisible(true);
            return false;
        }

        //selection and navigation sensors should not be the same
        if (manualScanRadioButton.isSelected()) {

            if (selectionSensor instanceof MouseSensor && navigationSensor instanceof MouseSensor
                    && ((MouseSensor) selectionSensor).getButton() == ((MouseSensor) navigationSensor).getButton()
                    && ((MouseSensor) selectionSensor).getClickCount() == ((MouseSensor) navigationSensor).getClickCount()) {
                errorLabel.setText("Τα κουμπιά επιλογής και πλοήγησης πρέπει να είναι διαφορετικά");
                errorLabel.setVisible(true);
                return false;
            }

            if (selectionSensor instanceof KeyboardSensor && navigationSensor instanceof KeyboardSensor
                    && ((KeyboardSensor) selectionSensor).getKeyCode() == ((KeyboardSensor) navigationSensor).getKeyCode()) {
                errorLabel.setText("Τα κουμπιά επιλογής και πλοήγησης πρέπει να είναι διαφορετικά");
                errorLabel.setVisible(true);
                return false;
            }
        }

       /* //image or text should be selected
        if (!imageCheckBox.isSelected() && !textCheckBox.isSelected()) {
            errorLabel.setText("Οι λέξεις θα πρέπει να έχουν τουλάχιστον ένα από τα δύο: λεκτικό, εικόνα");
            errorLabel.setVisible(true);
            return false;
        }*/

        return true;
    }

    private void saveAndNextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAndNextButtonActionPerformed

        if (validateUser()) {
            User newUser = new User(nameTextField.getText(), userImage);
            newUser.getConfiguration().setRotationSpeed(rotationSpeedSlider.getValue());
            newUser.getConfiguration().setNavigationSensor(navigationSensor);
            newUser.getConfiguration().setSelectionSensor(selectionSensor);
            newUser.getConfiguration().setDefaultGridRow(Integer.parseInt(rowsTextField.getText()));
            newUser.getConfiguration().setDefaultGridColumn(Integer.parseInt(columnsTextField.getText()));
            newUser.getConfiguration().setSound(soundCheckBox.isSelected());
            newUser.getConfiguration().setImage(imageCheckBox.isSelected());
            newUser.getConfiguration().setText(textCheckBox.isSelected());
            try {
                if (user == null) {
                    userService.save(newUser);
                } else {
                    userService.update(newUser, user.getName());
                }
                parent.changePanel(new ConfigurationPanel(newUser.getName(), parent));
            } catch (Exception ex) {
                Logger.getLogger(UserFormPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_saveAndNextButtonActionPerformed

    private void uploadImageLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uploadImageLabelMouseClicked
        userImage = "";
        JFileChooser chooser = new JFileChooser();

        chooser.setDialogTitle("Διαλέξτε εικόνα");
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setFileFilter(new FileNameExtensionFilter("Image Files", "png", "jpg", "jpeg", "JPG", "JPEG", "gif"));
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            userImage = chooser.getSelectedFile().getAbsolutePath();
            uploadImageLabel.setIcon(guiHelper.getIcon(userImage));
        }
    }//GEN-LAST:event_uploadImageLabelMouseClicked

    private void saveAndBackButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveAndBackButtonMouseClicked
        if (validateUser()) {
            User newUser = new User(nameTextField.getText(), userImage);
            newUser.getConfiguration().setRotationSpeed(rotationSpeedSlider.getValue());
            newUser.getConfiguration().setNavigationSensor(navigationSensor);
            newUser.getConfiguration().setSelectionSensor(selectionSensor);
            newUser.getConfiguration().setDefaultGridRow(Integer.parseInt(rowsTextField.getText()));
            newUser.getConfiguration().setDefaultGridColumn(Integer.parseInt(columnsTextField.getText()));
            newUser.getConfiguration().setSound(soundCheckBox.isSelected());
            newUser.getConfiguration().setImage(imageCheckBox.isSelected());
            newUser.getConfiguration().setText(textCheckBox.isSelected());

            try {
                if (user == null) {
                    userService.save(newUser);
                } else {
                    userService.update(newUser, user.getName());
                }
                parent.changePanel(new MainPanel(parent));
            } catch (Exception ex) {
                Logger.getLogger(UserFormPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_saveAndBackButtonMouseClicked

    private void saveToFileButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveToFileButtonMouseClicked
        final JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Επίλεξε φάκελο");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();        
            UserService us = new UserService();
            //returns boolean to show success/failure of operation
            boolean result = us.storeUserToExternalFile(user.getName(), file.getAbsolutePath());
            //on success print success message, else print error message
            if (result) {
                errorLabel.setVisible(false);
                successLabel.setText("Το προφίλ αποθηκεύτηκε.");
                successLabel.setVisible(true);
            } else {
                successLabel.setVisible(false);
                errorLabel.setText("Το προφίλ δεν αποθηκεύτηκε. Παρακαλώ δοκίμασε ξανά.");
                errorLabel.setVisible(true);
            }
        }
    }//GEN-LAST:event_saveToFileButtonMouseClicked

    /**
     * The action listeners for the text fields and radio buttons
     */
    private void setActionListeners() {
        selectionSensorTextField1.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent me) {
                if (selectionSensorTextField1.isEnabled()) {
                    selectionSensor = new MouseSensor(me.getButton(), me.getClickCount(), "mouse");
                    navigationSensor = null;
                    selectionSensorTextField1.setText(setSensorText(selectionSensor));
                }
            }
        });
        selectionSensorTextField1.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent ke) {
                if (selectionSensorTextField1.isEnabled()) {
                    selectionSensor = new KeyboardSensor(ke.getKeyCode(), String.valueOf(ke.getKeyChar()), "keyboard");
                    navigationSensor = null;
                    selectionSensorTextField1.setText(setSensorText(selectionSensor));
                }
            }
        });

        navigationSensorTextField.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent me) {
                if (navigationSensorTextField.isEnabled()) {
                    navigationSensor = new MouseSensor(me.getButton(), me.getClickCount(), "mouse");
                    navigationSensorTextField.setText(setSensorText(navigationSensor));
                }
            }
        });
        navigationSensorTextField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent ke) {
                if (navigationSensorTextField.isEnabled()) {
                    navigationSensor = new KeyboardSensor(ke.getKeyCode(), String.valueOf(ke.getKeyChar()), "keyboard");
                    navigationSensorTextField.setText(setSensorText(navigationSensor));
                }
            }
        });

        selectionSensorTextField2.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent me) {
                if (selectionSensorTextField2.isEnabled()) {
                    selectionSensor = new MouseSensor(me.getButton(), me.getClickCount(), "mouse");
                    selectionSensorTextField2.setText(setSensorText(selectionSensor));
                }
            }
        });
        selectionSensorTextField2.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent ke) {
                if (selectionSensorTextField2.isEnabled()) {
                    selectionSensor = new KeyboardSensor(ke.getKeyCode(), String.valueOf(ke.getKeyChar()), "keyboard");
                    selectionSensorTextField2.setText(setSensorText(selectionSensor));
                }
            }
        });

        backButton.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent me) {
                parent.changePanel(new MainPanel(parent));
            }
        });

        autoScanRadioButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                if (autoScanRadioButton.isSelected()) {
                    disableTextField(selectionSensorTextField2);
                    disableTextField(navigationSensorTextField);
                    enableTextField(selectionSensorTextField1);
                }
            }
        });

        manualScanRadioButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                if (manualScanRadioButton.isSelected()) {
                    disableTextField(selectionSensorTextField1);
                    enableTextField(selectionSensorTextField2);
                    enableTextField(navigationSensorTextField);
                }
            }
        });

    }

    private void setFocusListeners() {
        selectionSensorTextField1.addFocusListener(new FocusAdapter() {
            public void focusGained(FocusEvent fe) {
                selectionSensorTextField1.setText("");
            }

            public void focusLost(FocusEvent fe) {
                if (selectionSensor == null) {
                    selectionSensorTextField1.setText("Όρισε κουμπί επιλογής");
                } else {
                    selectionSensorTextField1.setText(setSensorText(selectionSensor));
                }
            }
        });

        navigationSensorTextField.addFocusListener(new FocusAdapter() {
            public void focusGained(FocusEvent fe) {
                navigationSensorTextField.setText("");
            }

            public void focusLost(FocusEvent fe) {
                if (navigationSensor == null) {
                    navigationSensorTextField.setText("Όρισε κουμπί πλοήγησης");
                } else {
                    navigationSensorTextField.setText(setSensorText(navigationSensor));
                }
            }
        });

        selectionSensorTextField2.addFocusListener(new FocusAdapter() {
            public void focusGained(FocusEvent fe) {
                selectionSensorTextField2.setText("");
            }

            public void focusLost(FocusEvent fe) {
                if (selectionSensor == null) {
                    selectionSensorTextField2.setText("Όρισε κουμπί επιλογής");
                } else {
                    selectionSensorTextField2.setText(setSensorText(selectionSensor));
                }
            }
        });

        nameTextField.addFocusListener(new FocusAdapter() {
            public void focusGained(FocusEvent fe) {
                if ("Όνομα χρήστη".equals(nameTextField.getText())) {
                    nameTextField.setText("");
                }
            }

            public void focusLost(FocusEvent fe) {
                if (nameTextField.getText().isEmpty()) {
                    nameTextField.setText("Όνομα χρήστη");
                }
            }
        });
    }

    private void setUI() {

        ButtonGroup scanButtons = new ButtonGroup();
        scanButtons.add(autoScanRadioButton);
        scanButtons.add(manualScanRadioButton);

        //set the titles of the form
        nameLabel.setFont(new Font(UIConstants.mainFont, Font.BOLD, 14));
        imageLabel.setFont(new Font(UIConstants.mainFont, Font.BOLD, 14));
        sensorLabel.setFont(new Font(UIConstants.mainFont, Font.BOLD, 14));
        rotationSpeedLabel.setFont(new Font(UIConstants.mainFont, Font.BOLD, 14));
        defaultGridSizeLabel.setFont(new Font(UIConstants.mainFont, Font.BOLD, 14));
        tilesLabel.setFont(new Font(UIConstants.mainFont, Font.BOLD, 14));

        nameTextField.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, Color.GRAY));
        nameTextField.setFont(new Font(UIConstants.mainFont, Font.ITALIC, 14));
        nameTextField.setHorizontalAlignment(JTextField.CENTER);
        uploadImageLabel.setFont(new Font(UIConstants.mainFont, Font.BOLD, 14));

        rowsTextField.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, Color.GRAY));
        rowsTextField.setHorizontalAlignment(JTextField.CENTER);
        columnsTextField.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, Color.GRAY));
        columnsTextField.setHorizontalAlignment(JTextField.CENTER);

        disableTextField(selectionSensorTextField2);
        disableTextField(navigationSensorTextField);
        enableTextField(selectionSensorTextField1);

        //set the text color
        selectionSensorTextField1.setForeground(Color.decode(UIConstants.green));
        selectionSensorTextField2.setForeground(Color.decode(UIConstants.green));
        navigationSensorTextField.setForeground(Color.decode(UIConstants.green));

        selectionSensorTextField1.setHorizontalAlignment(JTextField.CENTER);
        selectionSensorTextField2.setHorizontalAlignment(JTextField.CENTER);
        navigationSensorTextField.setHorizontalAlignment(JTextField.CENTER);

        step6ExplTextArea.setEditable(false);
        step6ExplTextArea.setLineWrap(true);
        step6ExplTextArea.setWrapStyleWord(true);
        step6ExplTextArea.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        jScrollPane1.setBorder(null);
        
        imageCheckBox.setSelected(true);
        imageCheckBox.setVisible(false);
    }

    private void disableTextField(JTextField textField) {
        textField.setEnabled(false);
        textField.setForeground(Color.decode(UIConstants.disabledColor));
        textField.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.decode(UIConstants.disabledColor)));
        textField.setBorder(BorderFactory.createCompoundBorder(textField.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 5)));
    }

    private void enableTextField(JTextField textField) {
        textField.setEnabled(true);
        textField.setForeground(Color.decode(UIConstants.green));
        textField.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.decode(UIConstants.green)));
        textField.setBorder(BorderFactory.createCompoundBorder(textField.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 5)));
    }

    private String setSensorText(Sensor s) {
        String text = "";

        if (s instanceof MouseSensor) {
            MouseSensor sensor = (MouseSensor) s;
            text += sensor.getClickCount();

            if (sensor.getButton() == 1 && sensor.getClickCount() == 1) {
                text += " αριστερό κλικ";
            } else if (sensor.getButton() == 1 && sensor.getClickCount() > 1) {
                text += " αριστερά κλικ";
            } else if (sensor.getButton() == 2 && sensor.getClickCount() == 1) {
                text += " μεσαίο κλικ";
            } else if (sensor.getButton() == 2 && sensor.getClickCount() > 1) {
                text += " μεσαία κλικ";
            } else if (sensor.getButton() == 3 && sensor.getClickCount() == 1) {
                text += " δεξί κλικ";
            } else if (sensor.getButton() == 3 && sensor.getClickCount() > 1) {
                text += " δεξιά κλικ";
            }

        } else if (s instanceof KeyboardSensor) {
            KeyboardSensor sensor = (KeyboardSensor) s;
            text += "πλήκτρο ";
            if (sensor.getKeyCode() == 10) {
                text += "enter";
            } else if (sensor.getKeyCode() == 32) {
                text += "space";
            } else {
                text += sensor.getKeyChar();
            }
        }

        return text;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // Generated using JFormDesigner Evaluation license - unknown
    private JPanel userPanel;
    private JTextField nameTextField;
    private JLabel uploadImageLabel;
    private JSlider rotationSpeedSlider;
    private JLabel rotationSpeedLabel;
    private JButton saveAndNextButton;
    private JLabel errorLabel;
    private JButton saveAndBackButton;
    private JButton backButton;
    private JLabel nameLabel;
    private JLabel imageLabel;
    private JLabel sensorLabel;
    private JLabel defaultGridSizeLabel;
    private JTextField columnsTextField;
    private JLabel xLabel;
    private JTextField rowsTextField;
    private JLabel tilesLabel;
    private JCheckBox soundCheckBox;
    private JCheckBox textCheckBox;
    private JCheckBox imageCheckBox;
    private JTextField selectionSensorTextField1;
    private JTextField navigationSensorTextField;
    private JTextField selectionSensorTextField2;
    private JRadioButton autoScanRadioButton;
    private JRadioButton manualScanRadioButton;
    private JScrollPane jScrollPane1;
    private JTextArea step6ExplTextArea;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JButton saveToFileButton;
    private JLabel successLabel;
    private JToolBar jToolBar1;
    private JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
