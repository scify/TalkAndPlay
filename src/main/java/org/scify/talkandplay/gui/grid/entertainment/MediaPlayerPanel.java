/**
* Copyright 2016 SciFY
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package org.scify.talkandplay.gui.grid.entertainment;

import java.awt.Font;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import org.scify.talkandplay.gui.helpers.Time;
import org.scify.talkandplay.gui.helpers.UIConstants;
import uk.co.caprica.vlcj.player.base.MediaPlayer;
import uk.co.caprica.vlcj.player.base.MediaPlayerEventAdapter;
import uk.co.caprica.vlcj.player.component.AudioPlayerComponent;

/**
 *
 * @author christina
 */
public class MediaPlayerPanel extends javax.swing.JPanel {

    private AudioPlayerComponent audioPlayer;
    private JPanel parent;

    public MediaPlayerPanel(JPanel parent) {
        this.parent = parent;
        this.audioPlayer = new AudioPlayerComponent();
        initComponents();
        initAudioPlayer();
        initCustomComponents();
    }

    private void initAudioPlayer() {

        mediaSlider.setEnabled(false);
        audioPlayer.mediaPlayer().audio().setMute(false);
        audioPlayer.mediaPlayer().events().addMediaPlayerEventListener(new MediaPlayerEventAdapter() {

            @Override
            public void opening(MediaPlayer mediaPlayer) {
            }

            @Override
            public void playing(MediaPlayer mediaPlayer) {
                audioPlayer.mediaPlayer().audio().setMute(false);
            }

            @Override
            public void positionChanged(MediaPlayer mp, float f) {
                int iPos = (int) (f * 100.0);
                mediaSlider.setValue(iPos);
            }

            @Override
            public void timeChanged(MediaPlayer mediaPlayer, final long newTime) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        startLabel.setText(String.format("%s", Time.formatTime(newTime)));
                    }
                });
            }
        });
    }

    private void initCustomComponents() {

        startLabel.setFont(new Font(UIConstants.mainFont, Font.PLAIN, 18));
        endLabel.setFont(new Font(UIConstants.mainFont, Font.PLAIN, 18));
    }

    public void playMedia(String path) {
        mediaSlider.setValue(0);
        audioPlayer.mediaPlayer().media().prepare(path);
        audioPlayer.mediaPlayer().media().parsing().parse();
        long length = audioPlayer.mediaPlayer().status().length();
        int secs = (int) (length / 1000) % 60;
        int mins = (int) ((length / (1000 * 60)) % 60);
        int hrs = (int) ((length / (1000 * 60 * 60)) % 24);

        endLabel.setText(Time.getTime(hrs, mins, secs));
        audioPlayer.mediaPlayer().media().play(path);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mediaPlayerPanel = new javax.swing.JPanel();
        mediaSlider = new javax.swing.JSlider();
        startLabel = new javax.swing.JLabel();
        endLabel = new javax.swing.JLabel();

        mediaPlayerPanel.setBackground(new java.awt.Color(255, 255, 255));

        mediaSlider.setToolTipText("");
        mediaSlider.setValue(0);

        startLabel.setText("00:00:00");

        endLabel.setText("00:00:00");

        javax.swing.GroupLayout mediaPlayerPanelLayout = new javax.swing.GroupLayout(mediaPlayerPanel);
        mediaPlayerPanel.setLayout(mediaPlayerPanelLayout);
        mediaPlayerPanelLayout.setHorizontalGroup(
            mediaPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mediaPlayerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(startLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mediaSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(endLabel)
                .addContainerGap())
        );
        mediaPlayerPanelLayout.setVerticalGroup(
            mediaPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mediaPlayerPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(mediaPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mediaSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startLabel)
                    .addComponent(endLabel))
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mediaPlayerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mediaPlayerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public AudioPlayerComponent getAudioPlayer() {
        return this.audioPlayer;
    }

    public boolean isPlaying() {
        return audioPlayer.mediaPlayer().status().isPlaying();
    }

    public void stop() {
        audioPlayer.mediaPlayer().release();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel endLabel;
    private javax.swing.JPanel mediaPlayerPanel;
    private javax.swing.JSlider mediaSlider;
    private javax.swing.JLabel startLabel;
    // End of variables declaration//GEN-END:variables
}
